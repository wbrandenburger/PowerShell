<PowerShell>

<Package>
	<Name>cChoco</Name>
	<Version>2.4.0.0</Version>
	<PublishedDate>13/11/2018 09:33:14</PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>SoftwareManagement</GroupProfile>
	<Repository>PSGallery</Repository>
	<Description>Chocolatey DSC Resources for use with internal packages and the community package repository. Learn more at http://chocolatey.org/.
	</Description>
</Package>

<Package>
	<Name>ChocolateyProfile</Name>
	<Version></Version>
	<PublishedDate></PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>SoftwareManagement</GroupProfile>
	<GroupProfile>Usability</GroupProfile>
	<Repository></Repository>
	<GitHub></GitHub>
	<Description>Tab completion for chocolatey
	</Description>
</Package>

<Package>
	<Name>PackageManagement</Name>
	<Version>1.2.4</Version>
	<PublishedDate>01/12/2018 03:01:27</PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>PowerShellTools</GroupProfile>
	<GroupProfile>SoftwareManagement</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub>https://github.com/PowerShell/PackageManagementProviderResource</GitHub>
	<Description>PackageManagement (a.k.a. OneGet) is a new way to discover and install software packages from around the web. It is a manager or multiplexor of existing package managers (also called package providers) that unifies Windows package management with a single Windows PowerShell interface
	</Description>
</Package>

<Package>
	<Name>Pester</Name>
	<Version>4.6.0</Version>
	<PublishedDate>21/01/2019 19:52:53</PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>PowerShellTools</GroupProfile>
	<GroupProfile>Programming</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub></GitHub>
	<Description>Pester provides a framework for running BDD style Tests to execute and validate PowerShell commands inside of PowerShell and offers a powerful set of Mocking Functions that allow tests to mimic and mock the functionality of any command inside of a piece of PowerShell code being tested. Pester tests can execute any command or script that is accessible to a pester test file. This can include functions, Cmdlets, Modules and scripts. Pester can be run in ad hoc style in a console or it can be integrated into the Build scripts of a Continuous Integration system.
	</Description>
</Package>

<Package>
	<Name>posh-git</Name>
	<Version>0.7.3</Version>
	<PublishedDate>20/04/2018 04:31:11</PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>Git</GroupProfile>
	<GroupProfile>SoftwareManagement</GroupProfile>
	<GroupProfile>Usability</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub>https://github.com/dahlbyk/posh-git</GitHub>
	<Description>Provides prompt with Git status summary information and tab completion for Git commands, parameters, remotes and branch names.
	</Description>
</Package>

<Package>
	<Name>posh-vcpkg</Name>
	<Version>0.0.1</Version>
	<PublishedDate></PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>SoftwareManagement</GroupProfile>
	<GroupProfile>Usability</GroupProfile>
	<Repository>vcpkg</Repository>
	<GitHub></GitHub>
	<Description>Tab completion for vcpkg
	</Description>
</Package>

<Package>
	<Name>PowerShellForGitHub</Name>
	<Version>0.8.0</Version>
	<PublishedDate>15/04/2019 16:06:55</PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>SoftwareManagement</GroupProfile>
	<GroupProfile>Programming</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub>https://github.com/PowerShell/PowerShellForGitHub</GitHub>
	<Description>PowerShell wrapper for GitHub API.
	</Description>
</Package>  

<Package>
	<Name>PowerShellGet</Name>
	<Version>2.0.4</Version>
	<PublishedDate>15/01/2019 00:33:16</PublishedDate>
	<Deactivated>false</Deactivated>	
	<GroupProfile>PowerShellTools</GroupProfile>
	<GroupProfile>SoftwareManagement</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub>https://github.com/PowerShell/PowerShellGet</GitHub>
	<RequiredPackages>PackageManagement</RequiredPackages>
	<Description>PowerShell module with commands for discovering, installing, updating and publishing the PowerShell artifacts like Modules, DSC Resources, Role Capabilities and Scripts.
	</Description>
</Package>

<Package>
	<Name>powershell-yaml</Name>
	<Version>0.4.0</Version>
	<PublishedDate>15/01/2019 11:55:42</PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>Programming</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub>https://github.com/cloudbase/powershell-yaml</GitHub>
	<Description>Powershell module for serializing and deserializing Yaml.
	</Description>
</Package>

<Package>
	<Name>PSIni</Name>
	<Version>3.1.2</Version>
	<PublishedDate>24/04/2019 08:45:08</PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>Usability</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub>http://lipkau.github.io/PsIni</GitHub>
	<Description>Convert hashtable to INI file and back. @ http://lipkau.github.io/PsIni/.
	</Description>
</Package>

<Package>
	<Name>PSPapis</Name>
	<Version></Version>
	<PublishedDate></PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>FileManagement</GroupProfile>
	<Repository>GitHub</Repository>
	<RequiredPackages>VirtualEnvWrapper</RequiredPackages>
	<Description>A set of PowerShell scripts which provide integration of Python package Papis.</Description>
</Package>

<Package>
	<Name>PSReadLine</Name>
	<Version>1.2</Version>
	<PublishedDate>25/01/2016 20:43:22</PublishedDate>
	<Deactivated>true</Deactivated>
	<GroupProfile>PowerShellTools</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub>https://github.com/lzybkr/PSReadLine</GitHub>
	<Description>Great command line editing in the PowerShell console host</Description>
</Package>

<Package>
	<Name>PSScriptAnalyzer</Name>
	<Version>1.17.1</Version>
	<PublishedDate>05/06/2018 21:32:49</PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>Programming</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub>https://github.com/PowerShell/PSScriptAnalyzer</GitHub>
	<Description>PSScriptAnalyzer provides script analysis and checks for potential code defects in the scripts by  applying a group of built-in or customized rules on the scripts being analyzed</Description>
</Package>

<Package>
	<Name>PSEnvironment</Name>
	<Version></Version>
	<PublishedDate></PublishedDate>
	<Deactivated>false</Deactivated>
	<GroupProfile>SoftwareManagement</GroupProfile>
	<Repository>GitHub</Repository>
	<Description>Module to make working with environment variables easier.</Description>
</Package>

<Package>
	<Name>PSVirtualEnv</Name>
	<Version></Version>
	<PublishedDate></PublishedDate>
	<Deactivated>false</Deactivated>	
	<GroupProfile>Usability</GroupProfile>
	<Repository>GitHub</Repository>
	<GitHub></GitHub>
	<Description>This Module includes wrappers for creating and deleting virtual environments in python</Description>
</Package>

<Package>
	<Name>VSSetup</Name>
	<Version>2.2.5</Version>
	<PublishedDate>05/07/2018 21:14:03</PublishedDate>
	<Deactivated>false</Deactivated>	
	<GroupProfile>Programming</GroupProfile>
	<Repository>PSGallery</Repository>
	<GitHub></GitHub>
	<Description>Visual Studio Setup PowerShell Module</Description>
</Package>

</PowerShell>